%airbrakes vehicle properties
uMax = 0.01; %m^2
uMin = 0.73 * 49.32 / 10000; %cm^2
mass = 6; %kg
maxVelocity = 150; %m/s
initialVelocity = 146; %m/s
initialAltitude = 100; %m
airDensity = 1.28; %
g = 9.8; %m/s



%functions
function k = kValue(airDensity, mass, dragArea)
    k = airDensity * dragArea / (2 * mass);
end


function h = altitudeTime(time, initialState, k)
    g = 9.8; %m/s
    h = initialState(2) + 1/k * log(cos(sqrt(k*g) * time) + initialState(1) * sqrt(k/g) * sin(sqrt(k * g) * time));
end

function v = velocityTime(time, initialState, k)
    g = 9.8; %m/s
    v = sqrt(g/k) * tan(atan(initialState(1) * sqrt(k/g) - sqrt(k * g) * time));
end

function t = apogeeTime(initialState, k)
    g = 9.8; %m/s
    t = atan(initialState(1) * sqrt(k/g))/sqrt(k * g);
end

function h = altitudeVelocity(velocity, initialState, k)
    g = 9.8; %m/s
    h = initialState(2) + 1/(2 * k) * log((g + k * initialState(1) * initialState(1)) ./ ( g + k * velocity .* velocity));
end

function h = integralFromula(velocity, initialState, u, density, mass)
    g = 9.8; %m/s
    k = @(v) u(v) * density / (2 * mass);
    integrand = @(v) -v ./ (g + k(v) .* v .* v);
    altitudes = zeros(length(velocity), 1);
    for(i = 1:length(altitudes))
        altitudes(i) = initialState(2) + integral(integrand, initialState(1), velocity(i));
    end

    h = altitudes;
end

function s = randomSignal(x, min, max, a, omega)
    scale = max - min;
    s = 0;
    for(i = 1:length(a))
        s = s + a(i) * cos(i * omega * x);
    end
    s = s / length(a) * scale;
    s = s + min + (max - min)/2;
end

function formatIEEE()
    width = 3.5;   % inches, IEEE single column
    height = 2.6;  % adjust for aspect ratio
    set(gcf, 'Units', 'inches', 'Position', [1 1 width height]);
    set(gca, 'FontSize', 8, 'FontName', 'Times New Roman');
    set(findall(gca, 'Type', 'Line'), 'LineWidth', 1.0);
end

function [X_fill, Y_fill] = makeFillRegion(x1, y1, x2, y2)
    X_fill = [x1(1:length(x1)), flip(x2(1:length(x2)))];
    Y_fill = [y1(1:length(x1)), flip(y2(1:length(x2)))];
end

%comparison to open rocket
figure(1)
clf
k = kValue(airDensity, mass, uMin);
initial = [initialVelocity, initialAltitude];
times = linspace(0, apogeeTime(initial, k), 100);
altitudes = altitudeTime(times, initial, k);
velocities = velocityTime(times, initial, k);
hold on
plot(times, altitudes, 'k')
plot(times, velocities, '-.k')
scatter(times(100), altitudes(100), 'k', 'filled')
text(times(100), altitudes(100), "890.51m ", 'FontName', 'Times New Roman', 'FontSize', 8, 'HorizontalAlignment', 'right', 'VerticalAlignment', 'bottom')
hold off

formatIEEE();
title("Flight Profile Predicted by 2D Model")
xlabel("Time (s)", 'FontSize', 9, 'FontName', 'Times New Roman')
legend("Altitude (m)", "Velocity(m/s)", 'Location', 'northwest', 'FontSize', 8)

%state space
figure(2)
clf
velocities = linspace(initialVelocity, 0, 100);
altitudes = altitudeVelocity(velocities, initial, k);
hold on
plot(velocities, altitudes, 'k')
scatter(0, altitudes(100), 'k', 'filled')
text(0, altitudes(100), " Apogee", 'FontName', 'Times New Roman', 'FontSize', 8, 'HorizontalAlignment', 'left', 'VerticalAlignment', 'bottom')
text(initialVelocity, initialAltitude, "Burnout ", 'FontName', 'Times New Roman', 'FontSize', 8, 'HorizontalAlignment', 'right', 'VerticalAlignment', 'top')
scatter(initialVelocity, initialAltitude, 'k', 'filled')
hold off
ylim([0 1000])
xlim([0 150])
formatIEEE();
title("Predicted Flight Path Through  2D State Space")
xlabel("Velocity (m/s)", 'FontSize', 9, 'FontName', 'Times New Roman')
ylabel("Altitude (m)", 'FontSize', 9, 'FontName', 'Times New Roman')

%multiple paths
figure(3)
clf

velocities = linspace(initialVelocity, 0, 100);
a1 = 2 * [0.5 0.25 -0.21 0.061];
omega1 = 1/20;
r1 = randomSignal(velocities, uMin, uMax, a1, omega1);
a2 = 2 * [0.1 -0.8 -0.56 0.3 -0.15];
omega2 = 1/30;
r2 = randomSignal(velocities, uMin, uMax, a2, omega2);
a3 = [0.5 0.25];
omega3 = 1/10;
r3 = -0.0018 + randomSignal(velocities, uMin, uMax, a3, omega3);

hold on
plot(velocities, r1)
plot(velocities, r2)
plot(velocities, r3)
yline(uMax)
yline(uMin)
hold off

figure(4)
clf
hold on

altitudes = integralFromula(velocities, initial, @(x) uMin, airDensity, mass);
plot(velocities, altitudes, '--k')

altitudes = integralFromula(velocities, initial, @(x) uMax, airDensity, mass);
plot(velocities, altitudes, '-.k')

altitudes = integralFromula(velocities, initial, @(x) randomSignal(x, uMin, uMax, a1, omega1), airDensity, mass);
plot(velocities, altitudes, 'k')

altitudes = integralFromula(velocities, initial, @(x) randomSignal(x, uMin, uMax, a2, omega2), airDensity, mass);
plot(velocities, altitudes, 'k')

altitudes = integralFromula(velocities, initial, @(x) -0.0018 + randomSignal(x, uMin, uMax, a3, omega3), airDensity, mass);
plot(velocities, altitudes, 'k')

hold off
ylim([0 1000])
xlim([0 150])
formatIEEE();
title("Flight Paths for Various Deployment Sequences")
xlabel("Velocity (m/s)", 'FontSize', 9, 'FontName', 'Times New Roman')
ylabel("Altitude (m)", 'FontSize', 9, 'FontName', 'Times New Roman')
legend("Fully Retracted", "Fully Deployed", "Non-Fixed Sequences", 'Location', 'southwest', 'FontSize', 8)


%future cone
figure(5)
clf
point = [80 400];
velocities = linspace(0, point(1), 100);
kMax = kValue(airDensity, mass, uMax);
minAltitudes = altitudeVelocity(velocities, point, k);
maxAltitudes = altitudeVelocity(velocities, point, kMax);

hold on
plot(velocities, minAltitudes, '--k')
plot(velocities, maxAltitudes, '-.k')
scatter(point(1), point(2), 'k', 'filled')
text(point(1), point(2), " Initial State", 'FontName', 'Times New Roman', 'FontSize', 8, 'HorizontalAlignment', 'left', 'VerticalAlignment', 'top')
hold off

ylim([0 1000])
xlim([0 150])
formatIEEE();
title("Example Future Cone")
xlabel("Velocity (m/s)", 'FontSize', 9, 'FontName', 'Times New Roman')
ylabel("Altitude (m)", 'FontSize', 9, 'FontName', 'Times New Roman')
legend("Upper Bound F^+", "LowerBound F^-", 'Location', 'northeast', 'FontSize', 8)

%past cone
figure(6)
clf

hold on
plot(velocities, maxAltitudes, '-.k')
plot(velocities, minAltitudes, '--k')
scatter(point(1), point(2), 'k', 'filled')
text(point(1), point(2), " Initial State", 'FontName', 'Times New Roman', 'FontSize', 8, 'HorizontalAlignment', 'left', 'VerticalAlignment', 'bottom')
hold off

velocities = linspace(point(1), maxVelocity, 100);
kMax = kValue(airDensity, mass, uMax);
minAltitudes = altitudeVelocity(velocities, point, k);
maxAltitudes = altitudeVelocity(velocities, point, kMax);

hold on
plot(velocities, maxAltitudes, '-.k')
plot(velocities, minAltitudes, '--k')
hold off

ylim([0 1000])
xlim([0 150])
formatIEEE();
title("Example Past Cone")
xlabel("Velocity (m/s)", 'FontSize', 9, 'FontName', 'Times New Roman')
ylabel("Altitude (m)", 'FontSize', 9, 'FontName', 'Times New Roman')
legend("Upper Bound F^+", "LowerBound F^-", 'Location', 'northeast', 'FontSize', 8)


