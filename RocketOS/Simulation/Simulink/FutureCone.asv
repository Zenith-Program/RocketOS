function x_dot = systemDynamics(x, u, m, p0, T0)
    g = 9.8;
    x_dot = zeros(4,1);
    x_dot(1) = x(3);
    x_dot(2) = x(4);
    x_dot(3) = 1/m * (-1/2 * densityFromAltitude(x(2), p0, T0)*u*sqrt(x(3)^2 + x(4)^2)*x(3));
    x_dot(4) = 1/m * (-1/2 * densityFromAltitude(x(2), p0, T0)*u*sqrt(x(3)^2 + x(4)^2)*x(4) - m * g);
end

function density = densityFromAltitude(altitude, p0, T0)
    % Constants
    L = 0.0065;      % K/m temperature lapse rate
    g = 9.80665;     % m/s^2 gravitational constant
    R = 8.31446;     % J/(mol*K) Ideal gas constant
    M = 0.0289652;   % kg/mol Molar mass of air
    density = p0*M/(R*T0)*(1-L*altitude/T0).^(g*M/(R*L)-1);
end

function [val, terminal, dir] = stopEvent(t,y)
    t;
    val = y(4);
    terminal = 1;
    dir = 0;
end

function [t,x] = ODETimeSolution(InitialVelocity, InitialAltitude, InitialAngle, LaunchSiteTemperature, LaunchSitePressure, DragArea, DryMass)
    MaxTime = 100;
    [t, x] = ode45(@(t,y) systemDynamics(y, DragArea, DryMass, LaunchSitePressure, LaunchSiteTemperature), 0 : 0.125 : MaxTime, [0,InitialAltitude,InitialVelocity*cos(InitialAngle),InitialVelocity*sin(InitialAngle)], odeset('Events', @(t,y) stopEvent(t,y)));
end

function [velocities, angles, altitudes] = generateAltitudeData(NumAngles, InitialVelocity, InitialAltitude, Temp, Pressure, DryMass, DragArea)
    angles = linspace(0, pi/2, NumAngles);
    altitudes = zeros(NumAngles);
    altitudes(1) = InitialAltitude;
    for(i = 2:NumAngles)
        startAngle = angles(i);
        [~, x] = ODETimeSolution(InitialVelocity, InitialAltitude, startAngle, Temp, Pressure, DragArea, DryMass);
        [~, newAlt] = makeStateFormat(x);
        altitudes(i) = newAlt(length(newAlt));
    end
end

function [VelocityAnglePair, Altitude] = makeStateFormat(x)
    VelocityAnglePair = [x(:,4), atan(abs(x(:,4)./x(:,3)))];
    Altitude = x(:,2);
end

function C = concatColAndPad(A,B,val)
    if size(A,1) < size(B,1)
        A = [val*ones(size(B,1) - size(A,1), size(A,2)); A];
    elseif size(B,1) < size(A,1)
        B = [val*ones(size(A,1) - size(B,1), size(B,2)); B];
    end
    C = [A, B];
end

function [apogees, angles]  = getApogees(H, Angle)
    apogees = P(size(P,1),:);
    angles = Angle()
end


function y = linInterp(x1,y1,x2,y2,x)
    if(x2-x1 == 0)
        y = y1;
    else
        y = (y2-y1)/(x2-x1)*(x-x1)+y1;
    end
end

% === Script Parameters ===
InitialVelocity = 150; %m/s
InitialAltitude = 100; %m
Mass = 3; %
AngleSamples = 50;
LaunchSitePressure = 101325; %Pa
LaunchSiteTemperature = 288.15; %K
MinimumDragArea = 0.0025; %m^2
MaximumDragArea = 0.01; %m^2

[v,angle,h] = generateRawMeshData(AngleSamples, InitialVelocity, InitialAltitude, LaunchSiteTemperature, LaunchSitePressure, Mass, MaximumDragArea);
[v1,angle1,h1] = generateRawMeshData(AngleSamples, InitialVelocity, InitialAltitude, LaunchSiteTemperature, LaunchSitePressure, Mass, MinimumDragArea);

figure(1)
clf
hold on
scatter3(v,angle,h);
%scatter3(v1,angle1,h1);